
Final_Slave_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000538  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001567  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d97  00000000  00000000  00001c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000868  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000705  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d4  00000000  00000000  00003ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00004185  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
   2:	00 00       	nop
   4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	6e c0       	rjmp	.+220    	; 0x142 <__bad_interrupt>
  66:	00 00       	nop
  68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
  8e:	00 00       	nop
  90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
  92:	00 00       	nop
  94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
  96:	00 00       	nop
  98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
  da:	00 00       	nop
  dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	08 02       	muls	r16, r24
  e6:	19 02       	muls	r17, r25
  e8:	2a 02       	muls	r18, r26
  ea:	3b 02       	muls	r19, r27
  ec:	4c 02       	muls	r20, r28
  ee:	fb 01       	movw	r30, r22
  f0:	fb 01       	movw	r30, r22
  f2:	fb 01       	movw	r30, r22
  f4:	fb 01       	movw	r30, r22
  f6:	fb 01       	movw	r30, r22
  f8:	fb 01       	movw	r30, r22
  fa:	fb 01       	movw	r30, r22
  fc:	fb 01       	movw	r30, r22
  fe:	fb 01       	movw	r30, r22
 100:	fb 01       	movw	r30, r22
 102:	fb 01       	movw	r30, r22
 104:	5d 02       	muls	r21, r29
 106:	61 02       	muls	r22, r17
 108:	65 02       	muls	r22, r21
 10a:	69 02       	muls	r22, r25
 10c:	6d 02       	muls	r22, r29
 10e:	fb 01       	movw	r30, r22
 110:	fb 01       	movw	r30, r22
 112:	fb 01       	movw	r30, r22
 114:	fb 01       	movw	r30, r22
 116:	fb 01       	movw	r30, r22
 118:	fb 01       	movw	r30, r22
 11a:	fb 01       	movw	r30, r22
 11c:	fb 01       	movw	r30, r22
 11e:	fb 01       	movw	r30, r22
 120:	fb 01       	movw	r30, r22
 122:	fb 01       	movw	r30, r22
 124:	71 02       	muls	r23, r17
 126:	75 02       	muls	r23, r21
 128:	79 02       	muls	r23, r25
 12a:	7d 02       	muls	r23, r29
 12c:	81 02       	muls	r24, r17

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d1 e2       	ldi	r29, 0x21	; 33
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	0c bf       	out	0x3c, r16	; 60
 13e:	4a d1       	rcall	.+660    	; 0x3d4 <main>
 140:	f9 c1       	rjmp	.+1010   	; 0x534 <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <DIO_vsetPINDir>:
#include "std_macros.h"
#include "DIO.h"

void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
	switch(portname)
 144:	82 34       	cpi	r24, 0x42	; 66
 146:	19 f1       	breq	.+70     	; 0x18e <DIO_vsetPINDir+0x4a>
 148:	18 f4       	brcc	.+6      	; 0x150 <DIO_vsetPINDir+0xc>
 14a:	81 34       	cpi	r24, 0x41	; 65
 14c:	39 f0       	breq	.+14     	; 0x15c <DIO_vsetPINDir+0x18>
 14e:	08 95       	ret
 150:	83 34       	cpi	r24, 0x43	; 67
 152:	b1 f1       	breq	.+108    	; 0x1c0 <DIO_vsetPINDir+0x7c>
 154:	84 34       	cpi	r24, 0x44	; 68
 156:	09 f4       	brne	.+2      	; 0x15a <DIO_vsetPINDir+0x16>
 158:	4c c0       	rjmp	.+152    	; 0x1f2 <DIO_vsetPINDir+0xae>
 15a:	08 95       	ret
	{
		
		
		case 'A':
		if(direction==1)
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	59 f4       	brne	.+22     	; 0x176 <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
 160:	21 b1       	in	r18, 0x01	; 1
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetPINDir+0x28>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetPINDir+0x24>
 170:	82 2b       	or	r24, r18
 172:	81 b9       	out	0x01, r24	; 1
 174:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 176:	21 b1       	in	r18, 0x01	; 1
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_vsetPINDir+0x3e>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_vsetPINDir+0x3a>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	81 b9       	out	0x01, r24	; 1
 18c:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 18e:	41 30       	cpi	r20, 0x01	; 1
 190:	59 f4       	brne	.+22     	; 0x1a8 <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 192:	24 b1       	in	r18, 0x04	; 4
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vsetPINDir+0x5a>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vsetPINDir+0x56>
 1a2:	82 2b       	or	r24, r18
 1a4:	84 b9       	out	0x04, r24	; 4
 1a6:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 1a8:	24 b1       	in	r18, 0x04	; 4
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vsetPINDir+0x70>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vsetPINDir+0x6c>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	84 b9       	out	0x04, r24	; 4
 1be:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 1c0:	41 30       	cpi	r20, 0x01	; 1
 1c2:	59 f4       	brne	.+22     	; 0x1da <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 1c4:	27 b1       	in	r18, 0x07	; 7
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vsetPINDir+0x8c>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vsetPINDir+0x88>
 1d4:	82 2b       	or	r24, r18
 1d6:	87 b9       	out	0x07, r24	; 7
 1d8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 1da:	27 b1       	in	r18, 0x07	; 7
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_vsetPINDir+0xa2>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_vsetPINDir+0x9e>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	87 b9       	out	0x07, r24	; 7
 1f0:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 1f2:	41 30       	cpi	r20, 0x01	; 1
 1f4:	59 f4       	brne	.+22     	; 0x20c <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 1f6:	2a b1       	in	r18, 0x0a	; 10
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_vsetPINDir+0xbe>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_vsetPINDir+0xba>
 206:	82 2b       	or	r24, r18
 208:	8a b9       	out	0x0a, r24	; 10
 20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 20c:	2a b1       	in	r18, 0x0a	; 10
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_vsetPINDir+0xd4>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_vsetPINDir+0xd0>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	8a b9       	out	0x0a, r24	; 10
 222:	08 95       	ret

00000224 <DIO_write>:
}


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
	switch(portname)
 224:	82 34       	cpi	r24, 0x42	; 66
 226:	19 f1       	breq	.+70     	; 0x26e <DIO_write+0x4a>
 228:	18 f4       	brcc	.+6      	; 0x230 <DIO_write+0xc>
 22a:	81 34       	cpi	r24, 0x41	; 65
 22c:	39 f0       	breq	.+14     	; 0x23c <DIO_write+0x18>
 22e:	08 95       	ret
 230:	83 34       	cpi	r24, 0x43	; 67
 232:	b1 f1       	breq	.+108    	; 0x2a0 <DIO_write+0x7c>
 234:	84 34       	cpi	r24, 0x44	; 68
 236:	09 f4       	brne	.+2      	; 0x23a <DIO_write+0x16>
 238:	4c c0       	rjmp	.+152    	; 0x2d2 <DIO_write+0xae>
 23a:	08 95       	ret
	{
		case 'A' :
		
		if(outputvalue==1)
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 240:	22 b1       	in	r18, 0x02	; 2
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_write+0x28>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_write+0x24>
 250:	82 2b       	or	r24, r18
 252:	82 b9       	out	0x02, r24	; 2
 254:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 256:	22 b1       	in	r18, 0x02	; 2
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_write+0x3e>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_write+0x3a>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	82 b9       	out	0x02, r24	; 2
 26c:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	59 f4       	brne	.+22     	; 0x288 <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 272:	25 b1       	in	r18, 0x05	; 5
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_write+0x5a>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_write+0x56>
 282:	82 2b       	or	r24, r18
 284:	85 b9       	out	0x05, r24	; 5
 286:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 288:	25 b1       	in	r18, 0x05	; 5
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_write+0x70>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_write+0x6c>
 298:	80 95       	com	r24
 29a:	82 23       	and	r24, r18
 29c:	85 b9       	out	0x05, r24	; 5
 29e:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 2a0:	41 30       	cpi	r20, 0x01	; 1
 2a2:	59 f4       	brne	.+22     	; 0x2ba <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 2a4:	28 b1       	in	r18, 0x08	; 8
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_write+0x8c>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_write+0x88>
 2b4:	82 2b       	or	r24, r18
 2b6:	88 b9       	out	0x08, r24	; 8
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 2ba:	28 b1       	in	r18, 0x08	; 8
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_write+0xa2>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_write+0x9e>
 2ca:	80 95       	com	r24
 2cc:	82 23       	and	r24, r18
 2ce:	88 b9       	out	0x08, r24	; 8
 2d0:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 2d2:	41 30       	cpi	r20, 0x01	; 1
 2d4:	59 f4       	brne	.+22     	; 0x2ec <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 2d6:	2b b1       	in	r18, 0x0b	; 11
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_write+0xbe>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_write+0xba>
 2e6:	82 2b       	or	r24, r18
 2e8:	8b b9       	out	0x0b, r24	; 11
 2ea:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 2ec:	2b b1       	in	r18, 0x0b	; 11
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_write+0xd4>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_write+0xd0>
 2fc:	80 95       	com	r24
 2fe:	82 23       	and	r24, r18
 300:	8b b9       	out	0x0b, r24	; 11
 302:	08 95       	ret

00000304 <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
	switch(portname)
 304:	82 34       	cpi	r24, 0x42	; 66
 306:	e9 f0       	breq	.+58     	; 0x342 <DIO_u8read+0x3e>
 308:	18 f4       	brcc	.+6      	; 0x310 <DIO_u8read+0xc>
 30a:	81 34       	cpi	r24, 0x41	; 65
 30c:	31 f0       	breq	.+12     	; 0x31a <DIO_u8read+0x16>
 30e:	55 c0       	rjmp	.+170    	; 0x3ba <DIO_u8read+0xb6>
 310:	83 34       	cpi	r24, 0x43	; 67
 312:	59 f1       	breq	.+86     	; 0x36a <DIO_u8read+0x66>
 314:	84 34       	cpi	r24, 0x44	; 68
 316:	e9 f1       	breq	.+122    	; 0x392 <DIO_u8read+0x8e>
 318:	50 c0       	rjmp	.+160    	; 0x3ba <DIO_u8read+0xb6>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
 31a:	40 b1       	in	r20, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	9c 01       	movw	r18, r24
 322:	06 2e       	mov	r0, r22
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_u8read+0x26>
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_u8read+0x22>
 32e:	84 2f       	mov	r24, r20
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	82 23       	and	r24, r18
 334:	93 23       	and	r25, r19
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_u8read+0x38>
 338:	95 95       	asr	r25
 33a:	87 95       	ror	r24
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_u8read+0x34>
		break;
 340:	08 95       	ret
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
 342:	43 b1       	in	r20, 0x03	; 3
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	9c 01       	movw	r18, r24
 34a:	06 2e       	mov	r0, r22
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_u8read+0x4e>
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_u8read+0x4a>
 356:	84 2f       	mov	r24, r20
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	82 23       	and	r24, r18
 35c:	93 23       	and	r25, r19
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_u8read+0x60>
 360:	95 95       	asr	r25
 362:	87 95       	ror	r24
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_u8read+0x5c>
		break;
 368:	08 95       	ret
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
 36a:	46 b1       	in	r20, 0x06	; 6
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	9c 01       	movw	r18, r24
 372:	06 2e       	mov	r0, r22
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_u8read+0x76>
 376:	22 0f       	add	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_u8read+0x72>
 37e:	84 2f       	mov	r24, r20
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	82 23       	and	r24, r18
 384:	93 23       	and	r25, r19
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_u8read+0x88>
 388:	95 95       	asr	r25
 38a:	87 95       	ror	r24
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_u8read+0x84>
		break;
 390:	08 95       	ret
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
 392:	49 b1       	in	r20, 0x09	; 9
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	9c 01       	movw	r18, r24
 39a:	06 2e       	mov	r0, r22
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_u8read+0x9e>
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_u8read+0x9a>
 3a6:	84 2f       	mov	r24, r20
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	82 23       	and	r24, r18
 3ac:	93 23       	and	r25, r19
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_u8read+0xb0>
 3b0:	95 95       	asr	r25
 3b2:	87 95       	ror	r24
 3b4:	6a 95       	dec	r22
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_u8read+0xac>
		break;
 3b8:	08 95       	ret
}


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
		break;
		default: break;
	}
	return return_value ;
}
 3bc:	08 95       	ret

000003be <LED_vInit>:
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
}
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	c1 ce       	rjmp	.-638    	; 0x144 <DIO_vsetPINDir>
 3c2:	08 95       	ret

000003c4 <LED_vTurnOn>:
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	2e cf       	rjmp	.-420    	; 0x224 <DIO_write>
 3c8:	08 95       	ret

000003ca <LED_vTurnOff>:
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	2b cf       	rjmp	.-426    	; 0x224 <DIO_write>
 3ce:	08 95       	ret

000003d0 <LED_u8ReadStatus>:
}
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
 3d0:	99 cf       	rjmp	.-206    	; 0x304 <DIO_u8read>
}
 3d2:	08 95       	ret

000003d4 <main>:


int main(void)
{

	SPI_vInitSlave();//initialize the SPI as a slave
 3d4:	9a d0       	rcall	.+308    	; 0x50a <SPI_vInitSlave>
	
	/* initialization of output pins of connected leds or devices */
	LED_vInit(FAN_PORT,FAN_PIN);
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	84 e4       	ldi	r24, 0x44	; 68
 3da:	f1 df       	rcall	.-30     	; 0x3be <LED_vInit>
	LED_vInit(ROOM1_PORT,ROOM1_PIN);
 3dc:	64 e0       	ldi	r22, 0x04	; 4
 3de:	82 e4       	ldi	r24, 0x42	; 66
 3e0:	ee df       	rcall	.-36     	; 0x3be <LED_vInit>
	LED_vInit(ROOM2_PORT,ROOM2_PIN);
 3e2:	65 e0       	ldi	r22, 0x05	; 5
 3e4:	82 e4       	ldi	r24, 0x42	; 66
 3e6:	eb df       	rcall	.-42     	; 0x3be <LED_vInit>
	LED_vInit(ROOM3_PORT,ROOM3_PIN);
 3e8:	66 e0       	ldi	r22, 0x06	; 6
 3ea:	82 e4       	ldi	r24, 0x42	; 66
 3ec:	e8 df       	rcall	.-48     	; 0x3be <LED_vInit>
	LED_vInit(ROOM4_PORT,ROOM4_PIN);
 3ee:	67 e0       	ldi	r22, 0x07	; 7
 3f0:	82 e4       	ldi	r24, 0x42	; 66
 3f2:	e5 df       	rcall	.-54     	; 0x3be <LED_vInit>
	
	uint8 request = DEFAULT_ACK;//the value that is received from the master
	uint8 response = DEFAULT_ACK;//the values that is sent back to the master
 3f4:	cf ef       	ldi	r28, 0xFF	; 255
	
	while(1)
	{
		request = SPI_ui8TransmitRecive(DEFAULT_ACK);//wait for the master to start the transmitting
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	8f d0       	rcall	.+286    	; 0x518 <SPI_ui8TransmitRecive>
 3fa:	90 e0       	ldi	r25, 0x00	; 0
		//ALL Messages are defined in STD_messages.h
		
		switch (request)
 3fc:	fc 01       	movw	r30, r24
 3fe:	71 97       	sbiw	r30, 0x11	; 17
 400:	e5 32       	cpi	r30, 0x25	; 37
 402:	f1 05       	cpc	r31, r1
 404:	c0 f7       	brcc	.-16     	; 0x3f6 <main+0x22>
 406:	88 27       	eor	r24, r24
 408:	ee 58       	subi	r30, 0x8E	; 142
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	8f 4f       	sbci	r24, 0xFF	; 255
 40e:	8a c0       	rjmp	.+276    	; 0x524 <__tablejump2__>
			
			
			/*********************************   STATUS COMMANDS ********************************/
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
 410:	64 e0       	ldi	r22, 0x04	; 4
 412:	82 e4       	ldi	r24, 0x42	; 66
 414:	dd df       	rcall	.-70     	; 0x3d0 <LED_u8ReadStatus>
 416:	88 23       	and	r24, r24
 418:	31 f0       	breq	.+12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41a:	64 e0       	ldi	r22, 0x04	; 4
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//if the led is turned on
 41c:	82 e4       	ldi	r24, 0x42	; 66
 41e:	d8 df       	rcall	.-80     	; 0x3d0 <LED_u8ReadStatus>
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	21 f4       	brne	.+8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			/*********************************   STATUS COMMANDS ********************************/
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 426:	c0 e0       	ldi	r28, 0x00	; 0
 428:	01 c0       	rjmp	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			}
			else if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 42a:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 42c:	8c 2f       	mov	r24, r28
 42e:	74 d0       	rcall	.+232    	; 0x518 <SPI_ui8TransmitRecive>
			break;//break the switch case
 430:	e2 cf       	rjmp	.-60     	; 0x3f6 <main+0x22>
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
 432:	65 e0       	ldi	r22, 0x05	; 5
 434:	82 e4       	ldi	r24, 0x42	; 66
 436:	cc df       	rcall	.-104    	; 0x3d0 <LED_u8ReadStatus>
 438:	88 23       	and	r24, r24
 43a:	31 f0       	breq	.+12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//if the led is turned on
 43c:	65 e0       	ldi	r22, 0x05	; 5
 43e:	82 e4       	ldi	r24, 0x42	; 66
 440:	c7 df       	rcall	.-114    	; 0x3d0 <LED_u8ReadStatus>
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	21 f4       	brne	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 448:	c0 e0       	ldi	r28, 0x00	; 0
			}
			else if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 44a:	01 c0       	rjmp	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 44c:	c1 e0       	ldi	r28, 0x01	; 1
 44e:	8c 2f       	mov	r24, r28
 450:	63 d0       	rcall	.+198    	; 0x518 <SPI_ui8TransmitRecive>
			break;//break the switch case
 452:	d1 cf       	rjmp	.-94     	; 0x3f6 <main+0x22>
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
 454:	66 e0       	ldi	r22, 0x06	; 6
 456:	82 e4       	ldi	r24, 0x42	; 66
 458:	bb df       	rcall	.-138    	; 0x3d0 <LED_u8ReadStatus>
 45a:	88 23       	and	r24, r24
 45c:	31 f0       	breq	.+12     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
 45e:	66 e0       	ldi	r22, 0x06	; 6
 460:	82 e4       	ldi	r24, 0x42	; 66
 462:	b6 df       	rcall	.-148    	; 0x3d0 <LED_u8ReadStatus>
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	21 f4       	brne	.+8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 468:	02 c0       	rjmp	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 46a:	c0 e0       	ldi	r28, 0x00	; 0
 46c:	01 c0       	rjmp	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 46e:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 470:	8c 2f       	mov	r24, r28
 472:	52 d0       	rcall	.+164    	; 0x518 <SPI_ui8TransmitRecive>
			break;//break the switch case
 474:	c0 cf       	rjmp	.-128    	; 0x3f6 <main+0x22>
			case ROOM4_STATUS:
			if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==0)//if the led is turned off
 476:	67 e0       	ldi	r22, 0x07	; 7
 478:	82 e4       	ldi	r24, 0x42	; 66
 47a:	aa df       	rcall	.-172    	; 0x3d0 <LED_u8ReadStatus>
 47c:	88 23       	and	r24, r24
 47e:	31 f0       	breq	.+12     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==1)//if the led is turned on
 480:	67 e0       	ldi	r22, 0x07	; 7
 482:	82 e4       	ldi	r24, 0x42	; 66
 484:	a5 df       	rcall	.-182    	; 0x3d0 <LED_u8ReadStatus>
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	21 f4       	brne	.+8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM4_STATUS:
			if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 48c:	c0 e0       	ldi	r28, 0x00	; 0
 48e:	01 c0       	rjmp	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
				response = ON_STATUS;//set the response as on status
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 490:	c1 e0       	ldi	r28, 0x01	; 1
 492:	8c 2f       	mov	r24, r28
 494:	41 d0       	rcall	.+130    	; 0x518 <SPI_ui8TransmitRecive>
			break;//break the switch case
			
			case FAN_STATUS:
			if (LED_u8ReadStatus(FAN_PORT,FAN_PIN)==0)//if the led is turned off
 496:	af cf       	rjmp	.-162    	; 0x3f6 <main+0x22>
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	84 e4       	ldi	r24, 0x44	; 68
 49c:	99 df       	rcall	.-206    	; 0x3d0 <LED_u8ReadStatus>
 49e:	88 23       	and	r24, r24
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(FAN_PORT,FAN_PIN)==1)//if the led is turned on
 4a0:	31 f0       	breq	.+12     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	84 e4       	ldi	r24, 0x44	; 68
 4a6:	94 df       	rcall	.-216    	; 0x3d0 <LED_u8ReadStatus>
 4a8:	81 30       	cpi	r24, 0x01	; 1
			break;//break the switch case
			
			case FAN_STATUS:
			if (LED_u8ReadStatus(FAN_PORT,FAN_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 4aa:	21 f4       	brne	.+8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
				response = ON_STATUS;//set the response as on status
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 4ae:	c0 e0       	ldi	r28, 0x00	; 0
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b2:	c1 e0       	ldi	r28, 0x01	; 1
			
			
			
			/*********************************   TURN ON COMMANDS ********************************/
			case ROOM1_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM1_PIN);//turn on the led of room 1
 4b4:	8c 2f       	mov	r24, r28
 4b6:	30 d0       	rcall	.+96     	; 0x518 <SPI_ui8TransmitRecive>
 4b8:	9e cf       	rjmp	.-196    	; 0x3f6 <main+0x22>
			break;//break the switch case
 4ba:	64 e0       	ldi	r22, 0x04	; 4
			
			case ROOM2_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM2_PIN);//turn on the led of room 2
 4bc:	82 e4       	ldi	r24, 0x42	; 66
 4be:	82 df       	rcall	.-252    	; 0x3c4 <LED_vTurnOn>
 4c0:	9a cf       	rjmp	.-204    	; 0x3f6 <main+0x22>
			break;//break the switch case
 4c2:	65 e0       	ldi	r22, 0x05	; 5
			
			case ROOM3_TURN_ON:
			LED_vTurnOn(ROOM3_PORT,ROOM3_PIN);//turn on the led of room 3
 4c4:	82 e4       	ldi	r24, 0x42	; 66
 4c6:	7e df       	rcall	.-260    	; 0x3c4 <LED_vTurnOn>
 4c8:	96 cf       	rjmp	.-212    	; 0x3f6 <main+0x22>
			break;//break the switch case
 4ca:	66 e0       	ldi	r22, 0x06	; 6
			
			case ROOM4_TURN_ON:
			LED_vTurnOn(ROOM4_PORT,ROOM4_PIN);//turn on the led of room 4
 4cc:	82 e4       	ldi	r24, 0x42	; 66
 4ce:	7a df       	rcall	.-268    	; 0x3c4 <LED_vTurnOn>
 4d0:	92 cf       	rjmp	.-220    	; 0x3f6 <main+0x22>
			break;//break the switch case
 4d2:	67 e0       	ldi	r22, 0x07	; 7
			
			case FAN_TURN_ON:
			LED_vTurnOn(FAN_PORT,FAN_PIN);//turn on the led of the TV
 4d4:	82 e4       	ldi	r24, 0x42	; 66
 4d6:	76 df       	rcall	.-276    	; 0x3c4 <LED_vTurnOn>
 4d8:	8e cf       	rjmp	.-228    	; 0x3f6 <main+0x22>
 4da:	60 e0       	ldi	r22, 0x00	; 0
			break;//break the switch case
 4dc:	84 e4       	ldi	r24, 0x44	; 68
			
			
			/*********************************   TURN OFF COMMANDS ********************************/
			
			case ROOM1_TURN_OFF:
			LED_vTurnOff(ROOM1_PORT,ROOM1_PIN);//turn off the led of room 1
 4de:	72 df       	rcall	.-284    	; 0x3c4 <LED_vTurnOn>
 4e0:	8a cf       	rjmp	.-236    	; 0x3f6 <main+0x22>
 4e2:	64 e0       	ldi	r22, 0x04	; 4
 4e4:	82 e4       	ldi	r24, 0x42	; 66
			break;//break the switch case
 4e6:	71 df       	rcall	.-286    	; 0x3ca <LED_vTurnOff>
			
			case ROOM2_TURN_OFF:
			LED_vTurnOff(ROOM2_PORT,ROOM2_PIN);//turn off the led of room 2
 4e8:	86 cf       	rjmp	.-244    	; 0x3f6 <main+0x22>
 4ea:	65 e0       	ldi	r22, 0x05	; 5
 4ec:	82 e4       	ldi	r24, 0x42	; 66
 4ee:	6d df       	rcall	.-294    	; 0x3ca <LED_vTurnOff>
			break;//break the switch case
 4f0:	82 cf       	rjmp	.-252    	; 0x3f6 <main+0x22>
			
			case ROOM3_TURN_OFF:
			LED_vTurnOff(ROOM3_PORT,ROOM3_PIN);//turn off the led of room 3
 4f2:	66 e0       	ldi	r22, 0x06	; 6
 4f4:	82 e4       	ldi	r24, 0x42	; 66
 4f6:	69 df       	rcall	.-302    	; 0x3ca <LED_vTurnOff>
 4f8:	7e cf       	rjmp	.-260    	; 0x3f6 <main+0x22>
			break;//break the switch case
 4fa:	67 e0       	ldi	r22, 0x07	; 7
			
			case ROOM4_TURN_OFF:
			LED_vTurnOff(ROOM4_PORT,ROOM4_PIN);//turn off the led of room 4
 4fc:	82 e4       	ldi	r24, 0x42	; 66
 4fe:	65 df       	rcall	.-310    	; 0x3ca <LED_vTurnOff>
 500:	7a cf       	rjmp	.-268    	; 0x3f6 <main+0x22>
 502:	60 e0       	ldi	r22, 0x00	; 0
			break;//break the switch case
 504:	84 e4       	ldi	r24, 0x44	; 68
			
			case FAN_TURN_OFF:
			LED_vTurnOff(FAN_PORT,FAN_PIN);//turn off the led of the TV
 506:	61 df       	rcall	.-318    	; 0x3ca <LED_vTurnOff>
 508:	76 cf       	rjmp	.-276    	; 0x3f6 <main+0x22>

0000050a <SPI_vInitSlave>:
 50a:	84 b1       	in	r24, 0x04	; 4
 50c:	88 60       	ori	r24, 0x08	; 8
			break;//break the switch case
 50e:	84 b9       	out	0x04, r24	; 4
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
	SPCR |= (1<<SPE);//Enable the SPI
 510:	8c b5       	in	r24, 0x2c	; 44
 512:	80 64       	ori	r24, 0x40	; 64
 514:	8c bd       	out	0x2c, r24	; 44
 516:	08 95       	ret

00000518 <SPI_ui8TransmitRecive>:
}

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
 518:	8e bd       	out	0x2e, r24	; 46
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (!(SPSR&(1<<SPIF)))	//wait till the transmitting is done
 51a:	0d b4       	in	r0, 0x2d	; 45
 51c:	07 fe       	sbrs	r0, 7
 51e:	fd cf       	rjmp	.-6      	; 0x51a <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
 520:	8e b5       	in	r24, 0x2e	; 46
 522:	08 95       	ret

00000524 <__tablejump2__>:
 524:	ee 0f       	add	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	88 1f       	adc	r24, r24
 52a:	8b bf       	out	0x3b, r24	; 59
 52c:	07 90       	elpm	r0, Z+
 52e:	f6 91       	elpm	r31, Z
 530:	e0 2d       	mov	r30, r0
 532:	19 94       	eijmp

00000534 <_exit>:
 534:	f8 94       	cli

00000536 <__stop_program>:
 536:	ff cf       	rjmp	.-2      	; 0x536 <__stop_program>
